{"version":3,"sources":["components/Restaurant.js","App.js","serviceWorker.js","index.js"],"names":["Restaurant","key","name","thumb","locality","address","cuisines","cost","rating","votes","rating_color","className","alt","src","style","backgroundColor","App","useState","restaurant","setRest","id","setId","search","setSearch","query","setQuery","useEffect","getRestaurants","a","fetch","method","headers","Accept","response","json","data","restaurants","onSubmit","e","preventDefault","onChange","target","value","hidden","type","placeholder","map","rest","location","average_cost_for_two","user_rating","aggregate_rating","rating_obj","bg_color","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c78bf4b3.chunk.js","sourcesContent":["import React from 'react'\n\nconst Restaurant = ({key, name, thumb, locality, address, cuisines, cost , rating, votes, rating_color }) => {\n\treturn (\n\t\t<div className=\"restaurant-tile\">\n\t\t\t<img alt=\"\" src={thumb} className=\"rest-img\" />\n\t\t\t<div className=\"rest-rating\">\n\t\t\t\t<p style={{backgroundColor: `${rating_color}`}}>{rating}</p>\n\t\t\t\t<div>{votes} votes</div>\n\t\t\t</div>\n\t\t\t<div className=\"rest-details\">\n\t\t\t\t<h2 className=\"rest-name\">{name}</h2>\n\t\t\t\t<div className=\"rest-loc\">{locality}</div>\n\t\t\t\t<div className=\"rest-add\">{address}</div>\n\t\t\t\t<hr/>\n\t\t\t\t<div className=\"rest-cusines\"><strong>CUISINES:</strong> {cuisines}</div>\n\t\t\t\t<div className=\"rest-cost\"><strong>COST FOR TWO:</strong> Rs.{cost}</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Restaurant\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport Restaurant from './components/Restaurant';\n\nfunction App() {\n\n\tconst [restaurant, setRest] = useState([]);\n\tconst [id, setId] = useState();\t\n\tconst [search, setSearch] = useState(\"\");\n\tconst [query, setQuery] = useState([0, \"\"])\n\t\n\tuseEffect(() => {\n\t\tgetRestaurants();\n\t}, [query]);\n\t\n\tconst getRestaurants = async () => {\n\t\tif(!(query[0] === 0 && query[1] === \"\")){\n\t\t\tconst response = await fetch(\n\t\t\t\t`https://developers.zomato.com/api/v2.1/search?entity_id=${query[0]}&entity_type=city&q=${query[1]}&count=100`, \n\t\t\t\t{\n\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tAccept: 'application/json',\n\t\t\t\t\t\t'user-key': '2ad63f94902019632381f2df301a60cc'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t\tconst data = await response.json();\n\t\t\tsetRest(data.restaurants);\n\t\t}\n\t};\n\t\n\tconst updateID = e => {\n\t\tsetId(e.target.value);\n\t}\n\t\n\tconst updateSearch = e => {\n\t\tsetSearch(e.target.value);\n\t}\n\t\n\tconst getSearch = e => {\n\t\te.preventDefault();\n\t\tsetQuery([id, search])\n\t}\n\t\n\treturn (\n\t    <div className=\"App\">\n\t  \t\t<div className=\"jumbotron\">\n\t  \t\t\t<div className=\"logo\">Jomato</div>\n\t  \t\t\t<h1>Find the best Restaurants in your city</h1>\n\t\t\t\t<form className=\"searchBar\"  onSubmit={getSearch}>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<select id=\"select_id\" className=\"city form-control\" onChange={updateID}>\n\t\t  \t\t\t\t\t<option value=\"0\" hidden>Select City</option>\n\t\t  \t\t\t\t\t<option value=\"4\">Bengaluru</option>\n\t\t  \t\t\t\t\t<option value=\"3\" >Mumbai</option>\n\t\t  \t\t\t\t\t<option value=\"1\">Delhi</option>\n\t\t  \t\t\t\t\t<option value=\"6\">Hyderabad</option>\n\t\t  \t\t\t\t\t<option value=\"5\">Pune</option>\n\t\t  \t\t\t\t\t<option value=\"11290\">Trivandrum</option>\n\t\t  \t\t\t\t\t<option value=\"7\">Chennai</option>\n\t\t  \t\t\t\t\t<option value=\"11\">Ahmedabad</option>\t\t\t\t  \n\t\t  \t\t\t\t</select>\n\t\t\t\t\t\t<input id=\"getText\" type=\"text\" className=\"restaurant\" placeholder=\"Search for Restaurant\" onChange={updateSearch}/>\n\t\t  \t\t\t\t<button id = \"getMessage\" className = \"search-btn\">Search</button>\n\t\t\t\t\t</div>\n\t\t\t\t</form>\n\t  \t\t</div>\n\t      \n\t\t\t{restaurant.map(rest => (\n\t\t\t\t<Restaurant\n\t\t\t\t\tkey = {rest.restaurant.id}\n\t\t\t\t\tname = {rest.restaurant.name}\n\t\t\t\t\tthumb = {rest.restaurant.thumb}\n\t\t\t\t\tlocality = {rest.restaurant.location.locality}\n\t\t\t\t\taddress = {rest.restaurant.location.address}\n\t\t\t\t\tcuisines = {rest.restaurant.cuisines}\n\t\t\t\t\tcost = {rest.restaurant.average_cost_for_two}\n\t\t\t\t\trating = {rest.restaurant.user_rating.aggregate_rating}\n\t\t\t\t\tvotes = {rest.restaurant.user_rating.votes}\n\t\t\t\t\trating_color = {rest.restaurant.user_rating.rating_obj.bg_color.type}\n\t\t\t\t/>\t  \n\t\t\t))};\n\t\t  \n\t    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}